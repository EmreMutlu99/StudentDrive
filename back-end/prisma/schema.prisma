// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  username         String?  @unique
  passwordHash     String
  avatarUrl        String?
  role             Role     @default(USER)
  isActive         Boolean  @default(true)
  emailVerified    Boolean  @default(false)

  // keep string FK for University (see note below)
  universityId     String?
  // üîß make this UUID to match DegreeProgram.id
  degreeProgramId  String?  @db.Uuid

  university       University?   @relation(fields: [universityId], references: [id])
  degreeProgram    DegreeProgram? @relation(fields: [degreeProgramId], references: [id])

  startSemester    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  sessions         Session[]
  files            File[]         @relation("UserFiles")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  revokedAt   DateTime?
  lastSeenAt  DateTime?
  userAgent   String?
  userAgentIp String? 
  
  @@index([userId])
  @@index([expiresAt])
}

model University {
  // If you want human slugs like "rwth", make this a plain string with NO default:
  id        String   @id @db.Text            // ‚Üê no @default(cuid())
  name      String   @unique
  country   String?
  city      String?
  createdAt DateTime @default(now())

  degreePrograms  DegreeProgram[]
  users           User[]
}

model DegreeProgram {
  id             String     @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  universityId   String
  university     University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  name           String
  degree         String
  language       String?
  startSemesters String?
  nc             String?
  users          User[]

  @@unique([universityId, name, degree])
}

model EmailVerification {
  email       String   @id
  codeHash    String
  payloadJson String
  expiresAt   DateTime
  attempts    Int      @default(0)
  lastSentAt  DateTime @default(now())
}

enum StorageBackend {
  minio
  s3
  gcs
  filesystem
}

model File {
  id               Int            @id @default(autoincrement())
  userId           String         @map("user_id")
  filename         String
  originalFilename String         @map("original_filename")
  mimetype         String
  sizeBytes        Int            @map("size_bytes")
  storagePath      String         @map("storage_path")
  storageBackend   StorageBackend @default(minio) @map("storage_backend")
  createdAt        DateTime       @default(now()) @map("created_at")
  verifiedAt       DateTime?      @map("verified_at")

  // name the relation to match the User side
  user             User           @relation("UserFiles", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_files_user_id")
  @@index([createdAt(sort: Desc)], map: "idx_files_created_at")
  @@index([userId, createdAt(sort: Desc)], map: "idx_files_user_created")
  @@index([verifiedAt], map: "idx_files_verified_at")

  @@map("files")
}